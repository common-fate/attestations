// Code generated by "enumer -type=Payload -linecomment -json"; DO NOT EDIT.

//
package types

import (
	"encoding/json"
	"fmt"
)

const _PayloadName = "granted.dev/Init/v0.1granted.dev/Authenticated/v0.1granted.dev/AccessRequest/v0.1granted.dev/Decision/v0.1granted.dev/GrantCreated/v0.1"

var _PayloadIndex = [...]uint8{0, 21, 51, 81, 106, 135}

func (i Payload) String() string {
	i -= 1
	if i < 0 || i >= Payload(len(_PayloadIndex)-1) {
		return fmt.Sprintf("Payload(%d)", i+1)
	}
	return _PayloadName[_PayloadIndex[i]:_PayloadIndex[i+1]]
}

var _PayloadValues = []Payload{1, 2, 3, 4, 5}

var _PayloadNameToValueMap = map[string]Payload{
	_PayloadName[0:21]:    1,
	_PayloadName[21:51]:   2,
	_PayloadName[51:81]:   3,
	_PayloadName[81:106]:  4,
	_PayloadName[106:135]: 5,
}

// PayloadString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PayloadString(s string) (Payload, error) {
	if val, ok := _PayloadNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Payload values", s)
}

// PayloadValues returns all values of the enum
func PayloadValues() []Payload {
	return _PayloadValues
}

// IsAPayload returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Payload) IsAPayload() bool {
	for _, v := range _PayloadValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Payload
func (i Payload) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Payload
func (i *Payload) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Payload should be a string, got %s", data)
	}

	var err error
	*i, err = PayloadString(s)
	return err
}
